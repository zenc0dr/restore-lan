#!/usr/bin/env bash
# restore-lan.sh ‚Äî —É–º–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º —Å Docker –∏ VPN
# –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è Ubuntu 20.04+ —Å Docker, sing-box/Outline, Clash API
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: sudo restore-lan [--iface enp2s0] [--dry] [--backup] [--safe-mode] [--restore-backup] [--force-docker-stop]

set -Eeuo pipefail

# –í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞
VERSION="2.0"
IFACE=""
DRY=0
BACKUP=1
SAFE_MODE=0
RESTORE_BACKUP=0
FORCE_DOCKER_STOP=0
LOG="/tmp/restore_lan_$(date +%F_%H-%M-%S).log"
BACKUP_DIR="/tmp/network_backups"
LOCK_FILE="/tmp/restore_lan.lock"
RESTORE_POINT=""

# –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() { echo -e "${BLUE}[INFO]${NC} $*" | tee -a "$LOG"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $*" | tee -a "$LOG"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $*" | tee -a "$LOG"; }
log_error() { echo -e "${RED}[ERROR]${NC} $*" | tee -a "$LOG"; }
log_debug() { echo -e "${PURPLE}[DEBUG]${NC} $*" | tee -a "$LOG"; }

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
for a in "$@"; do
  case "$a" in
    --iface) shift; IFACE="${1:-}"; shift || true ;;
    --dry) DRY=1; shift ;;
    --no-backup) BACKUP=0; shift ;;
    --safe-mode) SAFE_MODE=1; shift ;;
    --restore-backup) RESTORE_BACKUP=1; shift ;;
    --force-docker-stop) FORCE_DOCKER_STOP=1; shift ;;
    --version|-v) 
      echo "restore-lan –≤–µ—Ä—Å–∏–∏ $VERSION"
      echo "–ê–≤—Ç–æ—Ä: Rael (AI Assistant)"
      echo "–û–ø–∏—Å–∞–Ω–∏–µ: –£–º–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º —Å Docker –∏ VPN"
      exit 0
      ;;
    --help|-h) 
      echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: restore-lan [--iface INTERFACE] [--dry] [--no-backup] [--safe-mode] [--restore-backup] [--force-docker-stop]"
      echo "  --iface INTERFACE     –£–∫–∞–∑–∞—Ç—å —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)"
      echo "  --dry                 –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ"
      echo "  --no-backup           –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"
      echo "  --safe-mode           –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –º—è–≥–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)"
      echo "  --restore-backup      –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
      echo "  --force-docker-stop   –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
      echo "  --version, -v         –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é —Å–∫—Ä–∏–ø—Ç–∞"
      echo "  --help, -h            –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
      echo ""
      echo "–ü—Ä–∏–º–µ—Ä—ã:"
      echo "  sudo restore-lan                    # –û–±—ã—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
      echo "  sudo restore-lan --safe-mode --dry  # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
      echo "  sudo restore-lan --force-docker-stop # –° –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π Docker"
      echo ""
      echo "–ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞:"
      echo "  curl -sSL https://raw.githubusercontent.com/username/rael-scripts/main/scripts/restore-lan/restore-lan.sh | sudo tee ~/.bin/restore-lan > /dev/null && sudo chmod +x ~/.bin/restore-lan"
      exit 0
      ;;
    *) shift ;;
  esac
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
[[ $EUID -eq 0 ]] || { log_error "–ó–∞–ø—É—Å—Ç–∏ –æ—Ç root: sudo bash $0"; exit 1; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
if [[ -f "$LOCK_FILE" ]]; then
  PID=$(cat "$LOCK_FILE" 2>/dev/null || echo "")
  if [[ -n "$PID" ]] && kill -0 "$PID" 2>/dev/null; then
    log_error "–°–∫—Ä–∏–ø—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: $PID). –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, —É–¥–∞–ª–∏—Ç–µ $LOCK_FILE"
    exit 1
  else
    log_warning "–ù–∞–π–¥–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π lock —Ñ–∞–π–ª, —É–¥–∞–ª—è—é..."
    rm -f "$LOCK_FILE"
  fi
fi

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
echo $$ > "$LOCK_FILE"
trap 'cleanup_on_exit' EXIT INT TERM

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
cleanup_on_exit() {
  log_info "üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ..."
  rm -f "$LOCK_FILE"
  if [[ $DRY -eq 0 ]] && [[ $SAFE_MODE -eq 0 ]]; then
    log_info "–°–µ—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ."
  fi
}

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å –≤—ã–≤–æ–¥ –≤ –ª–æ–≥
exec &> >(tee -a "$LOG")

log_info "üöÄ –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∏. –õ–æ–≥: $LOG"
log_info "–†–µ–∂–∏–º: $([ $DRY -eq 1 ] && echo "DRY-RUN" || echo "–í–´–ü–û–õ–ù–ï–ù–ò–ï")"
log_info "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º: $([ $SAFE_MODE -eq 1 ] && echo "–î–ê" || echo "–ù–ï–¢")"
log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: $([ $RESTORE_BACKUP -eq 1 ] && echo "–î–ê" || echo "–ù–ï–¢")"
log_info "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker: $([ $FORCE_DOCKER_STOP -eq 1 ] && echo "–î–ê" || echo "–ù–ï–¢")"

# –§—É–Ω–∫—Ü–∏–∏
run() { 
  if [[ $DRY -eq 1 ]]; then 
    log_info "DRY: $*"
  else 
    log_info "–í—ã–ø–æ–ª–Ω—è—é: $*"
    eval "$@" || log_warning "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: $*"
  fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥
check_commands() {
  log_info "üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥..."
  
  local missing_commands=()
  
  for cmd in ip iptables systemctl; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
      missing_commands+=("$cmd")
    fi
  done
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º nftables
  if command -v nft >/dev/null 2>&1; then
    log_info "nftables –¥–æ—Å—Ç—É–ø–µ–Ω"
  else
    log_warning "nftables –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º iptables"
  fi
  
  if [[ ${#missing_commands[@]} -gt 0 ]]; then
    log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: ${missing_commands[*]}"
    exit 1
  fi
  
  log_success "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
create_backups() {
  if [[ $BACKUP -eq 0 ]]; then
    log_warning "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ"
    return 0
  fi
  
  log_info "üì¶ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏..."
  mkdir -p "$BACKUP_DIR"
  
  local timestamp
  timestamp=$(date +%Y%m%d_%H%M%S)
  
  # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è iptables
  if command -v iptables-save >/dev/null 2>&1; then
    run "iptables-save > '$BACKUP_DIR/iptables_backup_$timestamp.rules'"
  fi
  
  # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è nftables
  if command -v nft >/dev/null 2>&1; then
    run "nft list ruleset > '$BACKUP_DIR/nftables_backup_$timestamp.rules' 2>/dev/null || true"
  fi
  
  # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
  run "ip route show > '$BACKUP_DIR/routes_backup_$timestamp.txt'"
  
  # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø—Ä–∞–≤–∏–ª –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
  run "ip rule show > '$BACKUP_DIR/rules_backup_$timestamp.txt'"
  
  # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è resolv.conf
  if [[ -f /etc/resolv.conf ]]; then
    run "cp /etc/resolv.conf '$BACKUP_DIR/resolv_backup_$timestamp.conf'"
  fi
  
  # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è Docker —Å–µ—Ç–µ–π
  if command -v docker >/dev/null 2>&1; then
    run "docker network ls > '$BACKUP_DIR/docker_networks_backup_$timestamp.txt' 2>/dev/null || true"
  fi
  
  # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è systemd —Å–µ—Ä–≤–∏—Å–æ–≤
  run "systemctl list-units --type=service --state=running | grep -E '(sing-box|outline|clash)' > '$BACKUP_DIR/vpn_services_backup_$timestamp.txt' 2>/dev/null || true"
  
  log_success "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ $BACKUP_DIR"
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
restore_from_backup() {
  if [[ $RESTORE_BACKUP -eq 0 ]]; then
    return 0
  fi
  
  log_info "üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
  
  # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  local latest_backup
  latest_backup=$(ls -t "$BACKUP_DIR"/*.rules 2>/dev/null | head -n1 || echo "")
  
  if [[ -z "$latest_backup" ]]; then
    log_error "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    return 1
  fi
  
  log_info "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∏–∑: $latest_backup"
  
  if [[ "$latest_backup" == *"iptables"* ]]; then
    if command -v iptables-restore >/dev/null 2>&1; then
      run "iptables-restore < '$latest_backup'"
      log_success "iptables –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
  elif [[ "$latest_backup" == *"nftables"* ]]; then
    if command -v nft >/dev/null 2>&1; then
      run "nft flush ruleset"
      run "nft -f '$latest_backup'"
      log_success "nftables –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
  fi
  
  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
  local routes_backup
  routes_backup=$(ls -t "$BACKUP_DIR"/*routes*.txt 2>/dev/null | head -n1 || echo "")
  if [[ -n "$routes_backup" ]]; then
    log_info "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑: $routes_backup"
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
  fi
  
  log_success "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
  return 0
}

# –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
detect_iface() {
  if [[ -n "$IFACE" ]]; then
    log_info "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: $IFACE"
    return 0
  fi
  
  log_info "üîç –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞..."
  
  # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –ø—Ä–æ–≤–æ–¥–Ω–æ–π —Å IPv4, UP –∏ carrier
  local cand
  cand=$(ip -o -4 addr show up scope global 2>/dev/null | awk '!/docker|br-|veth|tun|outline|sbx|clash/ {print $2}' | sort -u)
  
  for i in $cand; do
    if [[ "$(cat /sys/class/net/$i/operstate 2>/dev/null || echo down)" == "up" ]]; then
      IFACE="$i"
      log_success "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: $IFACE"
      return 0
    fi
  done
  
  # fallback: –ø–µ—Ä–≤—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π
  IFACE=$(echo "$cand" | head -n1)
  if [[ -n "$IFACE" ]]; then
    log_warning "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: $IFACE"
    return 0
  fi
  
  log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
  return 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Docker
check_docker_status() {
  log_info "üê≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ Docker..."
  
  if ! command -v docker >/dev/null 2>&1; then
    log_info "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    return 0
  fi
  
  if ! systemctl is-active --quiet docker; then
    log_warning "Docker —Å–µ—Ä–≤–∏—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
    return 0
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ—Ç–∏
  local problem_networks
  problem_networks=$(docker network ls --format "{{.Name}}" --filter "driver=bridge" 2>/dev/null | grep -v "bridge\|host\|none" || true)
  
  if [[ -n "$problem_networks" ]]; then
    log_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ Docker —Å–µ—Ç–∏:"
    echo "$problem_networks" | while read -r net; do
      log_warning "  - $net"
    done
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º linkdown –º–æ—Å—Ç—ã
  local linkdown_bridges
  linkdown_bridges=$(ip route show 2>/dev/null | grep "linkdown" | grep "br-" | awk '{print $3}' | sed 's/^br-//' || true)
  
  if [[ -n "$linkdown_bridges" ]]; then
    log_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã linkdown Docker –º–æ—Å—Ç—ã:"
    echo "$linkdown_bridges" | while read -r br; do
      log_warning "  - $br"
    done
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
  local problem_containers
  problem_containers=$(docker ps --format "{{.Names}}" --filter "status=running" 2>/dev/null | head -5 || true)
  
  if [[ -n "$problem_containers" ]]; then
    log_info "–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
    echo "$problem_containers" | while read -r container; do
      log_info "  - $container"
    done
  fi
}

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ VPN —Å–µ—Ä–≤–∏—Å–æ–≤
stop_vpn_services() {
  log_info "‚õî –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é VPN —Å–µ—Ä–≤–∏—Å—ã..."
  
  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sing-box
  if systemctl --user list-unit-files --type=service 2>/dev/null | grep -q "sing-box"; then
    log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é sing-box user service..."
    run "systemctl --user stop sing-box || true"
    run "systemctl --user disable sing-box || true"
  fi
  
  if systemctl list-unit-files --type=service 2>/dev/null | grep -q "sing-box"; then
    log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é sing-box system service..."
    run "systemctl stop sing-box || true"
    run "systemctl disable sing-box || true"
  fi
  
  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Outline
  if systemctl list-unit-files --type=service 2>/dev/null | grep -q "outline"; then
    log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Outline service..."
    run "systemctl stop outline || true"
    run "systemctl disable outline || true"
  fi
  
  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Clash API
  if systemctl list-unit-files --type=service 2>/dev/null | grep -q "clash"; then
    log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Clash service..."
    run "systemctl stop clash || true"
    run "systemctl disable clash || true"
  fi
  
  # –î–æ–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
  local vpn_processes
  vpn_processes=$(pgrep -f "sing-box|outline|clash|sb-vpn" 2>/dev/null || true)
  
  if [[ -n "$vpn_processes" ]]; then
    log_info "–ó–∞–≤–µ—Ä—à–∞—é VPN –ø—Ä–æ—Ü–µ—Å—Å—ã: $vpn_processes"
    run "pkill -f 'sing-box|outline|clash|sb-vpn' || true"
    sleep 2
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
    vpn_processes=$(pgrep -f "sing-box|outline|clash|sb-vpn" 2>/dev/null || true)
    if [[ -n "$vpn_processes" ]]; then
      log_warning "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å—ã: $vpn_processes"
      run "pkill -9 -f 'sing-box|outline|clash|sb-vpn' || true"
    fi
  fi
  
  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º YACD –ø–∞–Ω–µ–ª—å –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–∞
  local yacd_pid
  yacd_pid=$(pgrep -f "yacd|:9091" 2>/dev/null || true)
  if [[ -n "$yacd_pid" ]]; then
    log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é YACD –ø–∞–Ω–µ–ª—å (PID: $yacd_pid)..."
    run "kill $yacd_pid || true"
  fi
}

# –û—á–∏—Å—Ç–∫–∞ TUN –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
clean_tun_interfaces() {
  log_info "üßπ –û—á–∏—â–∞—é TUN –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã..."
  
  # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ TUN –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
  local tun_interfaces
  tun_interfaces=$(ip -o link show 2>/dev/null | awk -F': ' '/tun|outline|sbx|clash/ {print $2}' | sed 's/@.*//' || true)
  
  if [[ -n "$tun_interfaces" ]]; then
    log_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã TUN –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã: $tun_interfaces"
    
    for dev in $tun_interfaces; do
      # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      [[ "$dev" == "$IFACE" ]] && continue
      
      log_info "–£–¥–∞–ª—è—é TUN –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: $dev"
      run "ip link set dev '$dev' down || true"
      run "ip link delete '$dev' || true"
    done
  else
    log_info "TUN –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
  fi
}

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ iptables/nftables
clean_firewall() {
  log_info "üî• –û—á–∏—â–∞—é firewall –ø—Ä–∞–≤–∏–ª–∞..."
  
  if [[ $SAFE_MODE -eq 1 ]]; then
    log_warning "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ firewall"
    if command -v nft >/dev/null 2>&1; then
      log_info "–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ nftables:"
      run "nft list ruleset | head -20"
    else
      log_info "–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ iptables:"
      run "iptables -L -n --line-numbers | head -20"
    fi
    return 0
  fi
  
  # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  local timestamp
  timestamp=$(date +%Y%m%d_%H%M%S)
  
  if command -v nft >/dev/null 2>&1; then
    log_info "–û—á–∏—â–∞—é nftables..."
    run "nft list ruleset > /tmp/nftables_backup_$timestamp.rules"
    run "nft flush ruleset || true"
  else
    log_info "–û—á–∏—â–∞—é iptables..."
    if command -v iptables-save >/dev/null 2>&1; then
      run "iptables-save > /tmp/iptables_backup_$timestamp.rules"
    fi
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    log_info "–û—á–∏—â–∞—é —Ç–∞–±–ª–∏—Ü—É filter..."
    run "iptables -F || true"
    run "iptables -X || true"
    run "iptables -P INPUT ACCEPT || true"
    run "iptables -P FORWARD ACCEPT || true"
    run "iptables -P OUTPUT ACCEPT || true"
    
    log_info "–û—á–∏—â–∞—é —Ç–∞–±–ª–∏—Ü—É nat..."
    run "iptables -t nat -F || true"
    run "iptables -t nat -X || true"
    
    log_info "–û—á–∏—â–∞—é —Ç–∞–±–ª–∏—Ü—É mangle..."
    run "iptables -t mangle -F || true"
    run "iptables -t mangle -X || true"
  fi
  
  log_success "Firewall –æ—á–∏—â–µ–Ω"
}

# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
clean_problematic_routes() {
  log_info "üó∫Ô∏è –û—á–∏—â–∞—é –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã..."
  
  # –£–¥–∞–ª—è–µ–º linkdown –º–∞—Ä—à—Ä—É—Ç—ã
  local linkdown_routes
  linkdown_routes=$(ip route show 2>/dev/null | grep -F " linkdown" || true)
  
  if [[ -n "$linkdown_routes" ]]; then
    log_info "–£–¥–∞–ª—è—é linkdown –º–∞—Ä—à—Ä—É—Ç—ã..."
    echo "$linkdown_routes" | while read -r route; do
      local route_cmd
      route_cmd="ip route del ${route%% linkdown*}"
      run "$route_cmd || true"
    done
  fi
  
  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è default –º–∞—Ä—à—Ä—É—Ç—ã
  local default_routes_count
  default_routes_count=$(ip route show default 2>/dev/null | wc -l)
  
  if [[ "$default_routes_count" -gt 1 ]]; then
    log_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $default_routes_count default –º–∞—Ä—à—Ä—É—Ç–æ–≤, —É–¥–∞–ª—è—é –¥—É–±–ª–∏..."
    while ip route show default 2>/dev/null | grep -q "default"; do
      local route_line
      route_line=$(ip route show default 2>/dev/null | head -n1)
      run "ip route del $route_line || true"
    done
  fi
  
  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
  log_info "–û—á–∏—â–∞—é –ø—Ä–∞–≤–∏–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏..."
  while read -r line; do
    if [[ "$line" =~ lookup\ (local|main|default) ]]; then
      continue
    fi
    local prio
    prio="${line%%:*}"
    [[ "$prio" =~ ^[0-9]+$ ]] || continue
    log_info "–£–¥–∞–ª—è—é –ø—Ä–∞–≤–∏–ª–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ $prio..."
    run "ip rule del priority $prio || true"
  done < <(ip rule show 2>/dev/null || true)
}

# –û—á–∏—Å—Ç–∫–∞ Docker –º–æ—Å—Ç–æ–≤ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
clean_docker_bridges() {
  log_info "üê≥ –û—á–∏—â–∞—é Docker –º–æ—Å—Ç—ã..."
  
  if [[ $SAFE_MODE -eq 1 ]]; then
    log_warning "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Docker –º–æ—Å—Ç–æ–≤"
    log_info "–¢–µ–∫—É—â–∏–µ Docker –º–æ—Å—Ç—ã:"
    run "ip -o link show | grep br- | head -10"
    return 0
  fi
  
  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if [[ $FORCE_DOCKER_STOP -eq 1 ]]; then
    log_warning "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Å–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
    run "docker stop \$(docker ps -q) 2>/dev/null || true"
    run "docker rm \$(docker ps -aq) 2>/dev/null || true"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ –º–æ—Å—Ç—ã –≤ –º–∞—Ä—à—Ä—É—Ç–∞—Ö
  local used_bridges
  used_bridges=$(ip route show 2>/dev/null | grep "br-" | awk '{print $3}' | sed 's/^br-//' | sort -u || true)
  
  if [[ -n "$used_bridges" ]]; then
    log_warning "Docker –º–æ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –º–∞—Ä—à—Ä—É—Ç–∞—Ö: $used_bridges"
    
    for br in $used_bridges; do
      if ip route show 2>/dev/null | grep "$br" | grep -q "default"; then
        log_warning "–ú–æ—Å—Ç $br –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è default –º–∞—Ä—à—Ä—É—Ç–∞, —É–¥–∞–ª—è—é..."
        run "ip route del default dev $br || true"
      fi
    done
  fi
  
  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Docker –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Ç–µ–π
  if systemctl is-active --quiet docker; then
    log_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é Docker –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Ç–µ–π..."
    run "systemctl restart docker || true"
    sleep 5
  fi
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö —Å–ª—É–∂–±
restore_network_services() {
  log_info "üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–µ—Ç–µ–≤—ã–µ —Å–ª—É–∂–±—ã..."
  
  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º NetworkManager
  if systemctl is-active --quiet NetworkManager; then
    log_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é NetworkManager..."
    run "systemctl restart NetworkManager || true"
    sleep 3
  fi
  
  # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  log_info "–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å $IFACE..."
  run "ip link set $IFACE down || true"
  sleep 1
  run "ip link set $IFACE up || true"
  sleep 2
  
  # DHCP renew
  log_info "–û–±–Ω–æ–≤–ª—è—é DHCP –Ω–∞ $IFACE..."
  if command -v dhclient >/dev/null 2>&1; then
    run "dhclient -r $IFACE || true"
    sleep 1
    run "dhclient $IFACE || true"
    sleep 2
  else
    log_warning "dhclient –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é DHCP renew"
  fi
}

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DNS
fix_dns() {
  log_info "üîé –ò—Å–ø—Ä–∞–≤–ª—è—é DNS..."
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º systemd-resolved
  if systemctl is-active --quiet systemd-resolved; then
    log_info "systemd-resolved –∞–∫—Ç–∏–≤–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É
    if [[ -L /etc/resolv.conf ]]; then
      log_info "/etc/resolv.conf –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–≤—è–∑–∞–Ω"
    else
      log_warning "/etc/resolv.conf –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–æ–π, –∏—Å–ø—Ä–∞–≤–ª—è—é..."
      run "ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf || true"
    fi
    
    # –û—á–∏—â–∞–µ–º –∫–µ—à
    run "systemd-resolve --flush-caches || true"
  else
    log_warning "systemd-resolved –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –∑–∞–ø—É—Å–∫–∞—é..."
    run "systemctl enable --now systemd-resolved || true"
    sleep 2
  fi
  
  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DNS —Å–µ—Ä–≤–µ—Ä—ã
  if command -v resolvectl >/dev/null 2>&1; then
    log_info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é DNS —á–µ—Ä–µ–∑ resolvectl..."
    run "resolvectl revert $IFACE || true"
    run "resolvectl dns $IFACE 1.1.1.1 8.8.8.8 || true"
    run "resolvectl flush-caches || true"
  fi
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
restore_routing() {
  log_info "üó∫Ô∏è –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é..."
  
  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–ª—é–∑
  local gw
  gw=$(ip route show default 2>/dev/null | awk '/default/ {print $3; exit}' || true)
  
  if [[ -z "$gw" ]]; then
    log_warning "–®–ª—é–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞—é—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å..."
    
    # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    local cidr
    cidr=$(ip -o -4 addr show dev "$IFACE" 2>/dev/null | awk '{print $4}' | head -n1)
    
    if [[ -n "$cidr" ]]; then
      local net base
      net="${cidr%/*}"
      base="$(cut -d. -f1-3 <<<"$net")"
      
      # –ü—Ä–æ–±—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ —à–ª—é–∑–∞
      for candidate in "$base.1" "$base.254" "$base.2"; do
        log_info "–ü—Ä–æ–±—É—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å default via $candidate..."
        if run "ip route replace default via $candidate dev $IFACE 2>/dev/null"; then
          log_success "–ú–∞—Ä—à—Ä—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ $candidate"
          gw="$candidate"
          break
        fi
      done
    fi
  else
    log_success "–®–ª—é–∑ –Ω–∞–π–¥–µ–Ω: $gw"
    run "ip route replace default via $gw dev $IFACE || true"
  fi
}

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ MTU
fix_mtu() {
  log_info "üìè –ò—Å–ø—Ä–∞–≤–ª—è—é MTU..."
  
  local current_mtu
  current_mtu=$(cat /sys/class/net/"$IFACE"/mtu 2>/dev/null || echo "1500")
  log_info "–¢–µ–∫—É—â–∏–π MTU –¥–ª—è $IFACE: $current_mtu"
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º MTU
  if [[ "$current_mtu" -gt 1500 ]]; then
    log_warning "MTU $current_mtu –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º, —É–º–µ–Ω—å—à–∞—é..."
    run "ip link set dev $IFACE mtu 1500 || true"
    sleep 1
  fi
  
  if [[ "$current_mtu" -lt 1280 ]]; then
    log_warning "MTU $current_mtu —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, —É–≤–µ–ª–∏—á–∏–≤–∞—é..."
    run "ip link set dev $IFACE mtu 1500 || true"
    sleep 1
  fi
  
  local final_mtu
  final_mtu=$(cat /sys/class/net/"$IFACE"/mtu 2>/dev/null || echo "unknown")
  log_info "–§–∏–Ω–∞–ª—å–Ω—ã–π MTU –¥–ª—è $IFACE: $final_mtu"
}

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
post_recovery_diagnostics() {
  log_info "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è..."
  
  # –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
  log_info "–°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:"
  run "ip -o link show | head -10"
  
  # IP –∞–¥—Ä–µ—Å–∞
  log_info "IP –∞–¥—Ä–µ—Å–∞:"
  run "ip -o -4 addr show | head -10"
  
  # –ú–∞—Ä—à—Ä—É—Ç—ã
  log_info "–ú–∞—Ä—à—Ä—É—Ç—ã:"
  run "ip route show | head -10"
  
  # DNS
  log_info "DNS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
  if command -v resolvectl >/dev/null 2>&1; then
    run "resolvectl status $IFACE | head -5"
  fi
  
  # –¢–µ—Å—Ç—ã —Å–≤—è–∑–∏
  log_info "üß™ –¢–µ—Å—Ç—ã —Å–≤—è–∑–∏:"
  
  # –ü–∏–Ω–≥ —à–ª—é–∑–∞
  local gw_ip
  gw_ip=$(ip route show default 2>/dev/null | awk '/default/ {print $3; exit}' || echo "")
  if [[ -n "$gw_ip" ]]; then
    log_info "–ü–∏–Ω–≥ —à–ª—é–∑–∞ $gw_ip..."
    if run "ping -c 2 -W 2 $gw_ip"; then
      log_success "–ü–∏–Ω–≥ —à–ª—é–∑–∞ —É—Å–ø–µ—à–µ–Ω"
    else
      log_warning "–ü–∏–Ω–≥ —à–ª—é–∑–∞ –Ω–µ —É–¥–∞–ª—Å—è"
    fi
  fi
  
  # –ü–∏–Ω–≥ –≤–Ω–µ—à–Ω–∏—Ö DNS
  log_info "–ü–∏–Ω–≥ 1.1.1.1..."
  if run "ping -c 2 -W 2 1.1.1.1"; then
    log_success "–ü–∏–Ω–≥ 1.1.1.1 —É—Å–ø–µ—à–µ–Ω"
  else
    log_warning "–ü–∏–Ω–≥ 1.1.1.1 –Ω–µ —É–¥–∞–ª—Å—è"
  fi
  
  # DNS —Ç–µ—Å—Ç
  log_info "DNS —Ç–µ—Å—Ç..."
  if run "getent hosts google.com"; then
    log_success "DNS —Ä–∞–±–æ—Ç–∞–µ—Ç"
  else
    log_warning "DNS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
  if command -v docker >/dev/null 2>&1; then
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
    if run "docker ps --format 'table {{.Names}}\t{{.Status}}' | head -5"; then
      log_success "Docker —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
      log_warning "Docker –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
  fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
main_recovery() {
  log_info "üåø –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∏..."
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
  check_commands
  
  # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  if [[ $RESTORE_BACKUP -eq 1 ]]; then
    restore_from_backup
    log_success "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    return 0
  fi
  
  # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
  create_backups
  
  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  detect_iface || exit 1
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
  check_docker_status
  
  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º VPN —Å–µ—Ä–≤–∏—Å—ã
  stop_vpn_services
  
  # –û—á–∏—â–∞–µ–º TUN –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
  clean_tun_interfaces
  
  # –û—á–∏—â–∞–µ–º firewall
  clean_firewall
  
  # –û—á–∏—â–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  clean_problematic_routes
  
  # –û—á–∏—â–∞–µ–º Docker –º–æ—Å—Ç—ã
  clean_docker_bridges
  
  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ —Å–ª—É–∂–±—ã
  restore_network_services
  
  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º MTU
  fix_mtu
  
  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º DNS
  fix_dns
  
  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
  restore_routing
  
  # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
  post_recovery_diagnostics
  
  log_success "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
  log_info "–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $LOG"
  
  if [[ $BACKUP -eq 1 ]]; then
    log_info "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –≤: $BACKUP_DIR"
  fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
trap 'log_error "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ $LINENO"; exit 1' ERR

# –ó–∞–ø—É—Å–∫
main_recovery
